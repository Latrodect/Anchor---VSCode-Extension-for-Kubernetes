{"version":3,"file":"extension.js","mappings":"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","sources":["webpack://backdoor/./src/commands/analyzeCode.ts","webpack://backdoor/./src/commands/generateDockerComposeYaml.ts","webpack://backdoor/./src/commands/generateDockerFiles.ts","webpack://backdoor/./src/commands/generateInlineCommands.ts","webpack://backdoor/./src/commands/generateKubernetesFiles.ts","webpack://backdoor/./src/extension.ts","webpack://backdoor/./src/utils/inlineComments.ts","webpack://backdoor/external commonjs \"vscode\"","webpack://backdoor/external node-commonjs \"fs\"","webpack://backdoor/external node-commonjs \"path\"","webpack://backdoor/webpack/bootstrap","webpack://backdoor/webpack/startup"],"sourcesContent":["import * as vscode from 'vscode';\r\nimport * as fs from 'fs';\r\n\r\nexport function analyzeCode() {\r\n    const editor = vscode.window.activeTextEditor;\r\n    if (!editor) {\r\n        vscode.window.showErrorMessage('No active editor found.');\r\n        return;\r\n    }\r\n\r\n    const messageRules: { [key: string]: string }= {\r\n        length:'',\r\n        naming:'',\r\n        strings:''\r\n    }\r\n    const document = editor.document;\r\n    const allowedLanguages: { [key: string]: number } = {\r\n        javascript:80,\r\n        python:79,\r\n        typescript:120\r\n    }; \r\n\r\n    if (!allowedLanguages[document.languageId]) {\r\n        vscode.window.showErrorMessage('Code analysis allow only TypeScript, Javascript, Python files.');\r\n        return;\r\n    }\r\n\r\n    const filePath = document.uri.fsPath;\r\n\r\n    fs.readFile(filePath, 'utf-8', (err, data) => {\r\n        if (err) {\r\n            vscode.window.showErrorMessage('Error reading file: ' + err.message);\r\n            return;\r\n        }\r\n        const lines = data.split('\\n');\r\n        const longLines = lines.filter(line => line.length > allowedLanguages[document.languageId]);\r\n\r\n        if (longLines.length === 0) {\r\n            messageRules.length = 'No lines exceed the character limit.'\r\n            vscode.window.showInformationMessage('No lines exceed the character limit.');\r\n        } else {\r\n            messageRules.length = `${longLines.length} lines exceed the character limit.`\r\n            vscode.window.showWarningMessage(`${longLines.length} lines exceed the character limit.`);\r\n        }\r\n\r\n        if(document.languageId === \"javascript\"){\r\n        const lowerCamelCaseVars: { name: string; line: number }[] = [];\r\n\r\n        for (let i = 0; i < lines.length; i++) {\r\n            const line = lines[i];\r\n\r\n            const variableRegex = /\\b(?:const|let|var)\\s+([a-zA-Z][a-zA-Z0-9]*)\\b/g;\r\n\r\n            let match;\r\n            while ((match = variableRegex.exec(line)) !== null) {\r\n                const variableName = match[1];\r\n                if (checkCamelCaseStrings(variableName)) {\r\n                    lowerCamelCaseVars.push({ name: variableName, line: i + 1 });\r\n                }\r\n            }\r\n        }\r\n\r\n        if (lowerCamelCaseVars.length === 0) {\r\n            messageRules.naming = 'All variable names are in camelCase.'\r\n            vscode.window.showInformationMessage('All variable names are in camelCase.');\r\n        } else {\r\n            const nonCamelCaseInfo = lowerCamelCaseVars\r\n                .map(variable => `${variable.name} (Line ${variable.line})`)\r\n                .join(', ');\r\n            messageRules.naming =  `Non-camelCase variables found: ${nonCamelCaseInfo}`\r\n            vscode.window.showWarningMessage(\r\n                `Non-camelCase variables found: ${nonCamelCaseInfo}`\r\n            );\r\n        }\r\n\r\n        let modifiedContent = data;\r\n\r\n        const stringLiteralRegex = /\"(.*?)\"/g;\r\n        let match;\r\n        while ((match = stringLiteralRegex.exec(data)) !== null) {\r\n            const originalString = match[0];\r\n            const convertedString = originalString.replace(/\"/g, \"'\");\r\n            modifiedContent = modifiedContent.replace(originalString, convertedString);\r\n        }\r\n\r\n        fs.writeFile(filePath, modifiedContent, 'utf-8', (writeErr) => {\r\n            if (writeErr) {\r\n                vscode.window.showErrorMessage('Error writing file: ' + writeErr.message);\r\n                return;\r\n            }\r\n            messageRules.naming =  'String literals with double quotes converted to single quotes.'\r\n            vscode.window.showInformationMessage('String literals with double quotes converted to single quotes.');\r\n        });\r\n    }\r\n    });\r\n    \r\n}\r\n\r\nfunction checkCamelCaseStrings(str: string): boolean {\r\n    const camelCaseRegex = /^[a-z][a-zA-Z0-9]*$/;\r\n    return camelCaseRegex.test(str);\r\n}\r\n","import * as vscode from 'vscode';\r\nimport * as fs from 'fs';\r\nimport * as path from 'path';\r\n\r\nexport async function generateDockerComposeYaml(autorunBool: boolean) {\r\n    interface DockerService {\r\n        build: {\r\n          context: string;\r\n          dockerfile: string;\r\n        };\r\n        ports: string[];\r\n        volumes: string[];\r\n        environment: string[];\r\n      }\r\n      \r\n      interface DockerComposeData {\r\n        version: string;\r\n        services: Record<string, DockerService>;\r\n      }\r\n\r\n    if (!vscode.workspace.workspaceFolders) {\r\n        vscode.window.showErrorMessage('No workspace is open.');\r\n        return;\r\n    }\r\n    \r\n    const inputServiceCount = await vscode.window.showInputBox({\r\n        prompt: 'How many service do you want to use:',\r\n        placeHolder: 'Example Usage: 6',\r\n    });\r\n\r\n    if (!inputServiceCount || inputServiceCount.trim() === \"\") {\r\n        vscode.window.showErrorMessage('Please provide how many service do you have.');\r\n        return;\r\n    }\r\n\r\n    const serviceCount = parseInt(inputServiceCount, 10);\r\n\r\n    if (Number.isNaN(serviceCount) || serviceCount <= 0 ) {\r\n      vscode.window.showErrorMessage('Please provide a valid positive number of services.');\r\n      return;\r\n   }\r\n\r\n   if( serviceCount >= 150){\r\n    vscode.window.showWarningMessage('Too many services. Extension can be crash and generating your files takes too much time!');\r\n    }\r\n\r\n    let serviceList = []\r\n    let envList = []\r\n\r\n    for (let index = 0; index < serviceCount; index++) {\r\n      const serviceInformation = await vscode.window.showInputBox({\r\n        prompt: 'Service Information:',\r\n        placeHolder: 'Example Usage: frontend(Service Name), 8000(Service Port)',\r\n      });\r\n    \r\n      if (!serviceInformation || inputServiceCount.trim() === \"\") {\r\n        \r\n        vscode.window.showErrorMessage('Please provide your service information.');\r\n        return;\r\n      }\r\n      \r\n      const service = checkSpacesAndReplace(serviceInformation.split(',').map(name => name.trim()));\r\n\r\n      if (service.length !== 2) {\r\n        vscode.window.showErrorMessage('Please provide service information in the correct format: \"Service Name, Service Port\".');\r\n        return;\r\n    }\r\n\r\n      let environmentVariables = await vscode.window.showInputBox({\r\n        prompt: 'Specify Environment Variables:',\r\n        placeHolder: 'Example Usage: mongo_host: 127.0.0.1, mongo_port: 4000, ...',\r\n      });\r\n\r\n      if (!environmentVariables || environmentVariables.trim() === \"\") {\r\n        vscode.window.showInformationMessage('Default item setted to environment variables.');\r\n        environmentVariables = \"env_var=default\";\r\n      }\r\n\r\n      const environmentVars = checkSpacesAndReplace(environmentVariables.split(',').map(name => name.trim()));\r\n      const formattedEnvironmentVar = createEnvironmentVariables(environmentVars);\r\n\r\n    serviceList.push(service);\r\n    envList.push(formattedEnvironmentVar);\r\n    }\r\n\r\n    const dockerComposeFolder = vscode.Uri.joinPath(vscode.workspace.workspaceFolders[0].uri, 'docker_compose');\r\n    fs.mkdirSync(dockerComposeFolder.fsPath, { recursive: true });\r\n    \r\n    const dockerComposeData: DockerComposeData = {\r\n      version: '3',\r\n      services: {}\r\n    };\r\n    \r\n    for (let index = 0; index < serviceList.length; index++) {\r\n      const [serviceName, port] = serviceList[index];\r\n      const environmentEntries = envList[index];\r\n    \r\n      const formattedEnvironmentStrings = environmentEntries.map(entry => `${entry}`).join('\\n      ');\r\n\r\n      dockerComposeData.services[serviceName] = {\r\n        build: {\r\n          context: `./path/to/${serviceName}`,\r\n          dockerfile: 'Dockerfile'\r\n        },\r\n        ports: [`${port}:${port}`],\r\n        volumes: [`./path/to/${serviceName}:/app/src/${serviceName}`],\r\n        environment: [\r\n          formattedEnvironmentStrings\r\n        ]\r\n      };\r\n    }\r\n      \r\n      const yamlContent = `\r\nversion: '${dockerComposeData.version}'\r\nservices:\r\n${Object.entries(dockerComposeData.services)\r\n        .map(([serviceName, serviceData]) => `  \r\n  ${serviceName}:\r\n    build:\r\n      context: ${serviceData.build.context}\r\n      dockerfile: ${serviceData.build.dockerfile}\r\n    ports:\r\n      - \"${serviceData.ports[0]}\"\r\n    volumes:\r\n      - \"${serviceData.volumes[0]}\"\r\n    environment:\r\n      ${serviceData.environment[0]}`)\r\n        .join('\\n')}`;\r\n\r\n    const dockerComposeYamlPath = path.join(dockerComposeFolder.fsPath, 'docker-compose.yaml');\r\n    await writeFileWithDirectoryCheck(dockerComposeYamlPath, yamlContent);\r\n\r\n    const config = vscode.workspace.getConfiguration('backdoor');\r\n    const dockerComposeAutorun = config.get('dockerComposeAutorun');\r\n\r\n    if (dockerComposeAutorun === true) {\r\n      console.log('Running Docker Compose...');\r\n      const workspaceDir = dockerComposeFolder.fsPath; \r\n      const terminal = vscode.window.createTerminal({\r\n        name: 'Cmd in Workspace',\r\n        cwd: workspaceDir, \r\n      });\r\n\r\n      terminal.sendText('docker compose up docker-compose.yaml');\r\n      terminal.show();\r\n      }\r\n    \r\n}\r\nasync function writeFileWithDirectoryCheck(filePath: string, content: string) {\r\n    const folderPath = path.dirname(filePath);\r\n    await fs.promises.mkdir(folderPath, { recursive: true });\r\n    await fs.promises.writeFile(filePath, content);\r\n}\r\n\r\nfunction createEnvironmentVariables(environmentVars: string[]): string[] {\r\n  return environmentVars.map(varName => `- ${varName}=${process.env[varName] || 'default'}`);\r\n}\r\n\r\nfunction checkSpacesAndReplace(variableList: string[]){\r\n  return variableList.map((item) => item.replace(/ +/g, '_'))\r\n}\r\n\r\nmodule.exports = {\r\n  generateDockerComposeYaml\r\n};","import * as vscode from 'vscode';\r\nimport * as fs from 'fs';\r\nimport * as path from 'path';\r\n\r\nexport async function generateDockerFiles() {\r\n    if (!vscode.workspace.workspaceFolders) {\r\n        vscode.window.showErrorMessage('No workspace is open.');\r\n        return;\r\n    }\r\n\r\n    const projectRoot = await vscode.window.showInputBox({\r\n        prompt: 'Root of your project:',\r\n        placeHolder: 'Example Usage: D:/MyProject/src',\r\n    });\r\n\r\n    const contApplicaitons = await vscode.window.showInputBox({\r\n        prompt: 'Your Apps:',\r\n        placeHolder: 'Example Usage(application folder names): frontned, backend, sync',\r\n    });\r\n\r\n    if (!contApplicaitons) {\r\n        vscode.window.showWarningMessage('Please specify at least one application path.');\r\n        return;\r\n    }\r\n\r\n    if (!projectRoot) {\r\n        vscode.window.showWarningMessage('Please provide root path.');\r\n        return;\r\n    }\r\n\r\n    const dockerFolder = vscode.Uri.joinPath(vscode.workspace.workspaceFolders[0].uri, 'docker');\r\n    fs.mkdirSync(dockerFolder.fsPath, { recursive: true });\r\n\r\n    const scriptsFolder = vscode.Uri.joinPath(vscode.workspace.workspaceFolders[0].uri, 'scripts');\r\n    fs.mkdirSync(scriptsFolder.fsPath, { recursive: true });\r\n\r\n    const dockerApplicationsPath = checkSpacesAndReplace(contApplicaitons.split(',').map(name => \"../docker/\" + name.trim()+\"/Dockerfile\"));\r\n\r\n    const scriptContent = `\r\n#!/bin/bash\r\n\r\n# Define the applications and their Dockerfile paths\r\nAPPLICATIONS=(${contApplicaitons})\r\nDOCKERFILES=(\"${dockerApplicationsPath}\")\r\n\r\n# Loop through each application and build the Docker image\r\nfor ((i=0; i<\\${#APPLICATIONS[@]}; i++)); do\r\n    APP_NAME=\"\\${APPLICATIONS[$i]}\"\r\n    DOCKERFILE=\"\\${DOCKERFILES[$i]}\"\r\n    echo \"Building Docker image for $APP_NAME...\"\r\n    \r\n    # Check if the Dockerfile exists\r\n    if [ ! -f \"$DOCKERFILE\" ]; then\r\n        echo \"Dockerfile not found for $APP_NAME.\"\r\n        continue\r\n    fi\r\n    \r\n    # Build the Docker image\r\n    docker build -t \"$APP_NAME:latest\" -f \"$DOCKERFILE\" .\r\n    \r\n    echo \"Docker image for $APP_NAME built.\"\r\n    echo\r\ndone\r\n\r\necho \"All Docker images built.\"\r\n`\r\n    const scriptFilePath = path.join(scriptsFolder.fsPath, 'docker_build_image.bash');\r\n            await writeFileWithDirectoryCheck(scriptFilePath, scriptContent);\r\n\r\n    const dockerApplications = checkSpacesAndReplace(contApplicaitons.split(',').map(name => name.trim()));\r\n\r\n    for (const appName of dockerApplications) {\r\n        const appFolder = vscode.Uri.joinPath(dockerFolder, appName);\r\n        fs.mkdirSync(appFolder.fsPath, { recursive: true });\r\n\r\n        const folderPath = findApplicationFolder(projectRoot, appName);\r\n        if (folderPath) {\r\n            const dockerFileContent = `\r\n# Use a base image\r\nFROM node:14\r\n\r\n# Set the working directory inside the container\r\nWORKDIR /app\r\n\r\n# Install dependencies\r\nRUN npm install\r\n\r\n# Copy the rest of the application code to the container\r\nCOPY ${folderPath} ./src/${appName}\r\n\r\n# Expose a port (if needed)\r\nEXPOSE 3000\r\n\r\n# Specify the command to run when the container starts\r\nCMD [\"npm run start\"]\r\n                                    `;\r\n\r\n            const dockerFilePath = path.join(appFolder.fsPath, 'Dockerfile');\r\n            await writeFileWithDirectoryCheck(dockerFilePath, dockerFileContent);\r\n        }\r\n    }\r\n}\r\n\r\nasync function writeFileWithDirectoryCheck(filePath: string, content: string) {\r\n    const folderPath = path.dirname(filePath);\r\n    await fs.promises.mkdir(folderPath, { recursive: true });\r\n    await fs.promises.writeFile(filePath, content);\r\n}\r\n\r\nfunction findApplicationFolder(projectRoot: string, applicationName: string): string | undefined {\r\n  const folderPath = path.join(projectRoot, applicationName);\r\n\r\n  try {\r\n      const stat = fs.statSync(folderPath);\r\n      if (stat.isDirectory()) {\r\n          return folderPath;\r\n      }\r\n  } catch (error) {\r\n    vscode.window.showWarningMessage('Folder does not exist.');\r\n  }\r\n\r\n  return undefined;\r\n}\r\n\r\nfunction checkSpacesAndReplace(variableList: string[]){\r\n    return variableList.map((item) => item.replace(/ +/g, '_'))\r\n  }","import * as vscode from 'vscode';\r\nimport { generateInlineComments } from '../utils/inlineComments';\r\n\r\nexport function generateInlineCommands() {\r\n    const editor = vscode.window.activeTextEditor;\r\n\r\n    if (!editor) {\r\n        vscode.window.showErrorMessage('No active editor found. Please open the page you want to run.');\r\n        return;\r\n    }\r\n\r\n    const selection = editor.selection;\r\n    const selectedLine = selection.active.line + 1;\r\n\r\n    generateInlineComments();\r\n\r\n    vscode.window.showInformationMessage('Inline comment added.');\r\n}\r\n","import * as vscode from 'vscode';\r\nimport * as fs from 'fs';\r\nimport * as path from 'path';\r\n\r\nexport async function generateKubernetesFiles() {\r\n    if (!vscode.workspace.workspaceFolders) {\r\n        vscode.window.showErrorMessage('No workspace is open.');\r\n        return;\r\n    }\r\n\r\n    // Namespace Input \r\n    const namespaceInput = await vscode.window.showInputBox({\r\n      prompt: 'Your Namespace:',\r\n      placeHolder: 'Example: my-application',\r\n    });\r\n\r\n    \r\n    if (!namespaceInput) {\r\n      vscode.window.showWarningMessage('Please specify a namespace.');\r\n      return;\r\n    }\r\n\r\n    const namespace = checkSpacesAndReplace([namespaceInput])\r\n\r\n    // Deployment Input \r\n    const deploymentsInput = await vscode.window.showInputBox({\r\n      prompt: 'Your Deployment Files:',\r\n      placeHolder: 'Example: frontend, backend, redis ',\r\n    });\r\n\r\n    if (!deploymentsInput) {\r\n      vscode.window.showWarningMessage('Please specify atleast one deployment name.');\r\n      return;\r\n  }\r\n\r\n    const deploymentNames = checkSpacesAndReplace(deploymentsInput.split(',').map(name => name.trim()));\r\n\r\n    // Jobs Input \r\n    const jobsInput = await vscode.window.showInputBox({\r\n      prompt: 'Your Jobs:',\r\n      placeHolder: 'Example: collector, pickle (Give blank if you dont have job.',\r\n    });\r\n\r\n    if (!jobsInput) {\r\n      vscode.window.showInformationMessage('Jobs Folder not created.');\r\n      \r\n  } \r\n    let jobNames: string[] = []\r\n    if(jobsInput){\r\n    jobNames = checkSpacesAndReplace(jobsInput.split(',').map(name => name.trim()));\r\n    }\r\n\r\n    // Folder Generation\r\n    const kubernetesFolder = vscode.Uri.joinPath(vscode.workspace.workspaceFolders[0].uri, 'kubernetes');\r\n        fs.mkdirSync(kubernetesFolder.fsPath, { recursive: true });\r\n\r\n    for(const deployment of deploymentNames){\r\n        const deploymentFolder = vscode.Uri.joinPath(kubernetesFolder, `${deployment}-service`);\r\n        fs.mkdirSync(deploymentFolder.fsPath, { recursive: true });\r\n    }\r\n        \r\n    const configmapsFolder = vscode.Uri.joinPath(kubernetesFolder, 'configmaps');\r\n    fs.mkdirSync(configmapsFolder.fsPath, { recursive: true });\r\n\r\n    const secretsFolder = vscode.Uri.joinPath(kubernetesFolder, 'secrets');\r\n    fs.mkdirSync(secretsFolder.fsPath, { recursive: true });\r\n\r\n    const jobsFolder = vscode.Uri.joinPath(kubernetesFolder, 'jobs');\r\n    fs.mkdirSync(jobsFolder.fsPath, { recursive: true });\r\n\r\n    // Deployment Yaml fs operations\r\n    const namespaceYAML = `\r\napiVersion: v1\r\nkind: Namespace\r\nmetadata:\r\n  name:\r\n   ${namespace}`;\r\n    fs.writeFileSync(path.join(kubernetesFolder.fsPath, 'namespace.yaml'), namespaceYAML);\r\n\r\n    const promises = deploymentNames.map(async deploymentName => {\r\n    const serviceFolder = vscode.Uri.joinPath(kubernetesFolder, `${deploymentName}-service`);\r\n    const deploymentYAML = `\r\napiVersion: apps/v1\r\nkind: Deployment\r\nmetadata:\r\n  name: ${deploymentName}\r\n  namespace: ${namespace}\r\nspec:\r\n  replicas: 3\r\n  selector:\r\n    matchLabels:\r\n      app: my-app\r\n  template:\r\n    metadata:\r\n      labels:\r\n        app: my-app\r\n    spec:\r\n      containers:\r\n        - name: my-container\r\n          image: nginx:latest\r\n          ports:\r\n            - containerPort: 80\r\n          `;\r\n    await writeFileWithDirectoryCheck(path.join(serviceFolder.fsPath, `${deploymentName}-deployment.yaml`), deploymentYAML);\r\n\r\n    const serviceYAML = `\r\napiVersion: v1\r\nkind: Service\r\nmetadata:\r\nname: ${deploymentName}-service\r\nnamespace: ${namespace}\r\nspec:\r\nselector:\r\n  app: ${deploymentName}\r\nports:\r\n  - protocol: TCP\r\n    port: 80\r\n    targetPort: 8080\r\n          `;\r\n    await writeFileWithDirectoryCheck(path.join(serviceFolder.fsPath, `${deploymentName}-service.yaml`), serviceYAML);\r\n\r\n    const ingressYAML = `\r\napiVersion: networking.k8s.io/v1\r\nkind: Ingress\r\nmetadata:\r\nname: ${deploymentName}-ingress\r\nnamespace: ${namespace}\r\nspec:\r\nrules:\r\n  - host: ${deploymentName}.com\r\n    http:\r\n      paths:\r\n        - path: /\r\n          pathType: Prefix\r\n          backend:\r\n            service:\r\n              name: ${deploymentName}-service\r\n              port:\r\n                number: 80\r\n          `;\r\n    await writeFileWithDirectoryCheck(path.join(serviceFolder.fsPath, `${deploymentName}-ingress.yaml`), ingressYAML);\r\n});\r\n    const secretYAML = `\r\napiVersion: v1\r\nkind: Secret\r\nmetadata:\r\n  name: application-secret\r\n  namespace: ${namespace}\r\ntype: Opaque\r\ndata:\r\n  username: ${Buffer.from('my-username').toString('base64')}\r\n  password: ${Buffer.from('my-password').toString('base64')}\r\n          `;\r\n    await writeFileWithDirectoryCheck(path.join(secretsFolder.fsPath, `application-secret.yaml`), secretYAML);\r\n\r\n    const configMapYAML = `\r\napiVersion: v1\r\nkind: ConfigMap\r\nmetadata:\r\n  name: application-configmap\r\n  namespace: ${namespace}\r\ndata:\r\n  config.properties: |\r\n    key1=value1\r\n    key2=value2\r\n            `;\r\n    await writeFileWithDirectoryCheck(path.join(configmapsFolder.fsPath, `application-configmap.yaml`), configMapYAML);\r\n\r\n    await Promise.all(promises);\r\n    vscode.window.showInformationMessage(`${deploymentNames.length} deployment, service, and ingress files generated successfully.`);\r\n\r\n    // Jobs Yaml fs operations\r\n    const jobPromises = jobNames.map(async jobNames => {})\r\n    const jobYAML = `\r\napiVersion: batch/v1\r\nkind: Job\r\nmetadata:\r\n  name: ${jobNames}\r\nspec:\r\n  completions: 1\r\n  template:\r\n    metadata:\r\n      name: ${jobNames}-pod\r\n    spec:\r\n      containers:\r\n        - name: ${jobNames}-container\r\n          image: nginx\r\n      restartPolicy: Never\r\n  \r\n        `;\r\n    await writeFileWithDirectoryCheck(path.join(jobsFolder.fsPath, `${jobNames}-job.yaml`), jobYAML);\r\n\r\n    await Promise.all(jobPromises);\r\n    vscode.window.showInformationMessage(`${jobNames.length} deployment, service, and ingress files generated successfully.`);\r\n  }\r\n  \r\nasync function writeFileWithDirectoryCheck(filePath: string, content: string) {\r\n  const folderPath = path.dirname(filePath);\r\n  await fs.promises.mkdir(folderPath, { recursive: true });\r\n  await fs.promises.writeFile(filePath, content);\r\n}\r\n\r\nfunction checkSpacesAndReplace(variableList: string[]){\r\n  return variableList.map((item) => item.replace(/ +/g, '_'))\r\n}","import * as vscode from 'vscode';\r\nimport * as path from 'path';\r\nimport { analyzeCode } from './commands/analyzeCode';\r\nimport { generateInlineCommands } from './commands/generateInlineCommands';\r\nimport { generateDockerFiles } from './commands/generateDockerFiles';\r\nimport { generateKubernetesFiles } from './commands/generateKubernetesFiles';\r\nimport { generateDockerComposeYaml } from './commands/generateDockerComposeYaml'\r\n\r\nexport function activate(context: vscode.ExtensionContext) {\r\n    console.log('Backdoor extension is now active.');\r\n    vscode.window.showInformationMessage('Important: Use CTRL + i for open extension UI.');\r\n    //Get config values\r\n    const config = vscode.workspace.getConfiguration('backdoor');\r\n    const dockerComposeAutorun = config.get('dockerComposeAutorun');\r\n    // Register commands\r\n    context.subscriptions.push(\r\n        vscode.commands.registerCommand('backdoor.analyzeCode', analyzeCode),\r\n        vscode.commands.registerCommand('backdoor.generateInlineCommands', generateInlineCommands),\r\n        vscode.commands.registerCommand('backdoor.generateDockerFiles', generateDockerFiles),\r\n        vscode.commands.registerCommand('backdoor.backdoorDashboardInit', showBackdoorDashboard),\r\n        vscode.commands.registerCommand('backdoor.generateKubernetesFiles', generateKubernetesFiles),\r\n        vscode.commands.registerCommand('backdoor.generateDockerComposeYaml', async () => {\r\n            if (typeof dockerComposeAutorun === 'boolean') {\r\n                await generateDockerComposeYaml(dockerComposeAutorun);\r\n            } else {\r\n                vscode.window.showErrorMessage('Invalid value for dockerComposeAutorun.');\r\n            }\r\n        })\r\n    );\r\n}\r\n\r\nasync function showBackdoorDashboard() {\r\n    const panel = vscode.window.createWebviewPanel(\r\n        'backdoorUI',\r\n        'Backdoor UI',\r\n        vscode.ViewColumn.One,\r\n        {}\r\n    );\r\n\r\n    panel.webview.html = getWebviewContent(panel.webview);\r\n\r\n}\r\n\r\nfunction getWebviewContent(webview: vscode.Webview): string {\r\n    const buttonStyle = 'padding: 6px 12px; font-size: 16px; background-color:#313131; border-radius:7px; border:1px solid white; color:white; margin: 10px;';\r\n    const extensionPath = vscode.extensions.getExtension('Latrodect.backdoor')?.extensionPath || '';\r\n    return `\r\n        <!DOCTYPE html>\r\n        <html lang=\"en\">\r\n        <head>\r\n            <meta charset=\"UTF-8\">\r\n            <meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'none'; style-src ${webview.cspSource} 'unsafe-inline'; script-src ${webview.cspSource} 'unsafe-inline' 'unsafe-eval';\">\r\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n            <title>Backdoor Code Reviewer</title>\r\n        </head>\r\n        <body>\r\n            <div style=\"display:flex;\">\r\n            <h1>Backdoor Code Reviewer</h1>\r\n            </div>\r\n            <p style=\"color:white;\"> Backdoor is a free code reviewer assistant. It helps developers with AI support, increases code quality with highlighter and linter features.<p>\r\n            <br>\r\n            <hr>\r\n            <h2>How to Generate docker-compose.yaml File</h2>\r\n            <p style=\"color:white;\"> If autorun enabled, make sure <stron>docker compose</strong> setup correctly. <p>\r\n            <p style=\"color:white;\"> Type CTRL + SHIFT + P and select <strong>Backdoor Docker Compose: Generate Docker Compose YAML</strong>. Provide how many services do you have. <p>\r\n            <p style=\"color:white;\"> Type your service name and port. After that step specify your environment variables. <p>\r\n            <p style=\"color:white;\"> Apply this steps for each service. <p>\r\n            <p style=\"color:white;\"> Your <strong>docker-compose.yaml</strong> will be created. Happy coding !!! <p>\r\n\r\n            <hr>\r\n\r\n            <h2>How to Generate Docker Files</h2>\r\n            <p style=\"color:white;\"> Type CTRL + SHIFT + P and select <strong>Backdoor Docker: Generate Docker files</strong>. Provide information about root of your project. <p>\r\n            <p style=\"color:white;\"> Type your application names which exist on your root.  <p>\r\n            <p style=\"color:white;\"> Your <strong>Dockerfiles</strong> will be created and we create a bash script for you. Happy building !!! <p>\r\n\r\n            <hr>\r\n\r\n            <h2>How to Generate Kubernetes Files</h2>\r\n            <p style=\"color:white;\"> Type CTRL + SHIFT + P and select <strong>Backdoor Kubernetes: Generate K8S files</strong>.  <p>\r\n            <p style=\"color:white;\"> Provide information about your services.  <p>\r\n            <p style=\"color:white;\"> Your <strong>k8s yaml</strong> and <strong>folder structure</strong> will be created. Happy deployment !!! <p>\r\n            <script src=\"${webview.asWebviewUri(vscode.Uri.file(__dirname + '/script.js'))}\"></script>\r\n        </body>\r\n        </html>\r\n    `;\r\n}\r\n\r\nexport function deactivate() {\r\n    console.log('Backdoor Code Reviewer extension is now deactivated.');\r\n}\r\n","import * as vscode from 'vscode';\r\n// import axios from 'axios';\r\n\r\nexport async function generateInlineComments() {\r\n    const editor = vscode.window.activeTextEditor;\r\n    if (!editor) {\r\n        vscode.window.showErrorMessage('No active editor found.');\r\n        return;\r\n    }\r\n\r\n    const selectedCode = getSelectedCode(editor);\r\n    if (!selectedCode) {\r\n        vscode.window.showInformationMessage('No code is selected.');\r\n        return;\r\n    }\r\n    // await generateComment(selectedCode);\r\n    const generatedComment = \"Axios will be added soon.\"\r\n    insertComment(editor, generatedComment);\r\n}\r\n\r\nfunction getSelectedCode(editor: vscode.TextEditor): string | undefined {\r\n    const selection = editor.selection;\r\n    if (selection.isEmpty) {\r\n        return undefined;\r\n    }\r\n\r\n    return editor.document.getText(selection);\r\n}\r\n\r\n// async function generateComment(code: string): Promise<string> {\r\n//     const apiKey = await vscode.window.showInputBox({\r\n//         prompt: 'ChatGPT API Key',\r\n//         placeHolder: 'sk-..JKuaJ',\r\n//       });\r\n//     const prompt = `Code to review:\\n\\n${code}\\n\\nPlease provide a comment for this code.`;\r\n\r\n//     try {\r\n//         const response = await axios.post(\r\n//             'https://api.openai.com/v1/engines/davinci-codex/completions',\r\n//             {\r\n//                 prompt,\r\n//                 max_tokens: 50, \r\n//             },\r\n//             {\r\n//                 headers: {\r\n//                     'Content-Type': 'application/json',\r\n//                     'Authorization': `Bearer ${apiKey}`,\r\n//                 },\r\n//             }\r\n//         );\r\n\r\n//         return response.data.choices[0].text.trim();\r\n//     } catch (error) {\r\n//         console.error('Error generating comment:', error);\r\n//         return 'Unable to generate comment at the moment.';\r\n//     }\r\n// }\r\n\r\nfunction insertComment(editor: vscode.TextEditor, comment: string) {\r\n    const selection = editor.selection;\r\n    const position = selection.end;\r\n    editor.edit(editBuilder => {\r\n        editBuilder.insert(position, '\\n// Generated Comment: ' + comment);\r\n    });\r\n\r\n    vscode.window.showInformationMessage('Comment generated and inserted.');\r\n}\r\n","module.exports = require(\"vscode\");","module.exports = require(\"fs\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(112);\n"],"names":["editor","vscode","window","activeTextEditor","showErrorMessage","messageRules","length","naming","strings","document","allowedLanguages","javascript","python","typescript","languageId","filePath","uri","fsPath","fs","readFile","err","data","message","lines","split","longLines","filter","line","showInformationMessage","showWarningMessage","lowerCamelCaseVars","i","variableRegex","match","exec","variableName","test","push","name","nonCamelCaseInfo","map","variable","join","modifiedContent","stringLiteralRegex","originalString","convertedString","replace","writeFile","writeErr","generateDockerComposeYaml","autorunBool","workspace","workspaceFolders","inputServiceCount","showInputBox","prompt","placeHolder","trim","serviceCount","parseInt","Number","isNaN","serviceList","envList","index","serviceInformation","service","checkSpacesAndReplace","environmentVariables","formattedEnvironmentVar","varName","process","env","dockerComposeFolder","Uri","joinPath","mkdirSync","recursive","dockerComposeData","version","services","serviceName","port","formattedEnvironmentStrings","entry","build","context","dockerfile","ports","volumes","environment","yamlContent","Object","entries","serviceData","dockerComposeYamlPath","path","content","folderPath","dirname","promises","mkdir","writeFileWithDirectoryCheck","getConfiguration","get","console","log","workspaceDir","terminal","createTerminal","cwd","sendText","show","variableList","item","module","exports","findApplicationFolder","projectRoot","applicationName","statSync","isDirectory","error","contApplicaitons","dockerFolder","scriptsFolder","dockerApplicationsPath","scriptContent","scriptFilePath","dockerApplications","appName","appFolder","dockerFileContent","dockerFilePath","selection","active","generateInlineComments","namespaceInput","namespace","deploymentsInput","deploymentNames","jobsInput","jobNames","kubernetesFolder","deployment","deploymentFolder","configmapsFolder","secretsFolder","jobsFolder","namespaceYAML","writeFileSync","deploymentName","serviceFolder","deploymentYAML","serviceYAML","ingressYAML","secretYAML","Buffer","from","toString","configMapYAML","Promise","all","jobPromises","jobYAML","showBackdoorDashboard","panel","createWebviewPanel","ViewColumn","One","webview","html","extensions","getExtension","extensionPath","cspSource","asWebviewUri","file","__dirname","dockerComposeAutorun","subscriptions","commands","registerCommand","analyzeCode","generateInlineCommands","generateDockerFiles","generateKubernetesFiles","selectedCode","isEmpty","getText","getSelectedCode","comment","position","end","edit","editBuilder","insert","insertComment","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call"],"sourceRoot":""}