{"version":3,"file":"extension.js","mappings":"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","sources":["webpack://backdoor/./src/commands/analyzeCode.ts","webpack://backdoor/./src/commands/generateDockerComposeYaml.ts","webpack://backdoor/./src/commands/generateDockerFiles.ts","webpack://backdoor/./src/commands/generateInlineCommands.ts","webpack://backdoor/./src/commands/generateKubernetesFiles.ts","webpack://backdoor/./src/extension.ts","webpack://backdoor/./src/utils/inlineComments.ts","webpack://backdoor/external commonjs \"vscode\"","webpack://backdoor/external node-commonjs \"fs\"","webpack://backdoor/external node-commonjs \"path\"","webpack://backdoor/webpack/bootstrap","webpack://backdoor/webpack/startup"],"sourcesContent":["import * as vscode from 'vscode';\r\nimport * as fs from 'fs';\r\n\r\nexport function analyzeCode() {\r\n    const editor = vscode.window.activeTextEditor;\r\n    if (!editor) {\r\n        vscode.window.showErrorMessage('No active editor found.');\r\n        return;\r\n    }\r\n\r\n    const messageRules: { [key: string]: string }= {\r\n        length:'',\r\n        naming:'',\r\n        strings:''\r\n    }\r\n    const document = editor.document;\r\n    const allowedLanguages: { [key: string]: number } = {\r\n        javascript:80,\r\n        python:79,\r\n        typescript:120\r\n    }; \r\n\r\n    if (!allowedLanguages[document.languageId]) {\r\n        vscode.window.showErrorMessage('Code analysis allow only TypeScript, Javascript, Python files.');\r\n        return;\r\n    }\r\n\r\n    const filePath = document.uri.fsPath;\r\n\r\n    fs.readFile(filePath, 'utf-8', (err, data) => {\r\n        if (err) {\r\n            vscode.window.showErrorMessage('Error reading file: ' + err.message);\r\n            return;\r\n        }\r\n        const lines = data.split('\\n');\r\n        const longLines = lines.filter(line => line.length > allowedLanguages[document.languageId]);\r\n\r\n        if (longLines.length === 0) {\r\n            messageRules.length = 'No lines exceed the character limit.'\r\n            vscode.window.showInformationMessage('No lines exceed the character limit.');\r\n        } else {\r\n            messageRules.length = `${longLines.length} lines exceed the character limit.`\r\n            vscode.window.showWarningMessage(`${longLines.length} lines exceed the character limit.`);\r\n        }\r\n\r\n        if(document.languageId === \"javascript\"){\r\n        const lowerCamelCaseVars: { name: string; line: number }[] = [];\r\n\r\n        for (let i = 0; i < lines.length; i++) {\r\n            const line = lines[i];\r\n\r\n            const variableRegex = /\\b(?:const|let|var)\\s+([a-zA-Z][a-zA-Z0-9]*)\\b/g;\r\n\r\n            let match;\r\n            while ((match = variableRegex.exec(line)) !== null) {\r\n                const variableName = match[1];\r\n                if (checkCamelCaseStrings(variableName)) {\r\n                    lowerCamelCaseVars.push({ name: variableName, line: i + 1 });\r\n                }\r\n            }\r\n        }\r\n\r\n        if (lowerCamelCaseVars.length === 0) {\r\n            messageRules.naming = 'All variable names are in camelCase.'\r\n            vscode.window.showInformationMessage('All variable names are in camelCase.');\r\n        } else {\r\n            const nonCamelCaseInfo = lowerCamelCaseVars\r\n                .map(variable => `${variable.name} (Line ${variable.line})`)\r\n                .join(', ');\r\n            messageRules.naming =  `Non-camelCase variables found: ${nonCamelCaseInfo}`\r\n            vscode.window.showWarningMessage(\r\n                `Non-camelCase variables found: ${nonCamelCaseInfo}`\r\n            );\r\n        }\r\n\r\n        let modifiedContent = data;\r\n\r\n        const stringLiteralRegex = /\"(.*?)\"/g;\r\n        let match;\r\n        while ((match = stringLiteralRegex.exec(data)) !== null) {\r\n            const originalString = match[0];\r\n            const convertedString = originalString.replace(/\"/g, \"'\");\r\n            modifiedContent = modifiedContent.replace(originalString, convertedString);\r\n        }\r\n\r\n        fs.writeFile(filePath, modifiedContent, 'utf-8', (writeErr) => {\r\n            if (writeErr) {\r\n                vscode.window.showErrorMessage('Error writing file: ' + writeErr.message);\r\n                return;\r\n            }\r\n            messageRules.naming =  'String literals with double quotes converted to single quotes.'\r\n            vscode.window.showInformationMessage('String literals with double quotes converted to single quotes.');\r\n        });\r\n    }\r\n    });\r\n    \r\n}\r\n\r\nfunction checkCamelCaseStrings(str: string): boolean {\r\n    const camelCaseRegex = /^[a-z][a-zA-Z0-9]*$/;\r\n    return camelCaseRegex.test(str);\r\n}\r\n","import * as vscode from 'vscode';\r\nimport * as fs from 'fs';\r\nimport * as path from 'path';\r\n\r\nexport async function generateDockerComposeYaml() {\r\n    interface DockerService {\r\n        build: {\r\n          context: string;\r\n          dockerfile: string;\r\n        };\r\n        ports: string[];\r\n        volumes: string[];\r\n        environment: string[];\r\n      }\r\n      \r\n      interface DockerComposeData {\r\n        version: string;\r\n        services: Record<string, DockerService>;\r\n      }\r\n\r\n    if (!vscode.workspace.workspaceFolders) {\r\n        vscode.window.showErrorMessage('No workspace is open.');\r\n        return;\r\n    }\r\n    \r\n    const inputServiceCount = await vscode.window.showInputBox({\r\n        prompt: 'How many service do you want to use:',\r\n        placeHolder: '6',\r\n    });\r\n\r\n    if (!inputServiceCount || inputServiceCount === \"0\") {\r\n        vscode.window.showErrorMessage('Please provide how much service do you have.');\r\n        return;\r\n    }\r\n\r\n    const serviceCount = parseInt(inputServiceCount, 10);\r\n    let serviceList = []\r\n    for (let index = 0; index < serviceCount; index++) {\r\n        const serviceInformation = await vscode.window.showInputBox({\r\n            prompt: 'Service Information:',\r\n            placeHolder: 'Example Usage: frontend, 8000, volume/path, NODE_ENV=development(environment example)',\r\n        });\r\n\r\n        if (!serviceInformation) {\r\n            vscode.window.showErrorMessage('Please provide your service information.');\r\n            return;\r\n        }\r\n\r\n        const service = serviceInformation.split(',').map(name => name.trim());\r\n        if(service.length === 4){\r\n            serviceList.push(service)\r\n        }else{\r\n            vscode.window.showErrorMessage('Some information is missing');\r\n        }\r\n    }\r\n\r\n    const dockerComposeFolder = vscode.Uri.joinPath(vscode.workspace.workspaceFolders[0].uri, 'docker_compose');\r\n    fs.mkdirSync(dockerComposeFolder.fsPath, { recursive: true });\r\n    \r\n    const dockerComposeData: DockerComposeData = {\r\n        version: '3',\r\n        services: {}\r\n      };\r\n      \r\n      serviceList.forEach(([serviceName, port]) => {\r\n        dockerComposeData.services[serviceName] = {\r\n          build: {\r\n            context: `./path/to/${serviceName}`,\r\n            dockerfile: 'Dockerfile'\r\n          },\r\n          ports: [`${port}:${port}`],\r\n          volumes: [`./path/to/${serviceName}:/app/src/${serviceName}`],\r\n          environment: [\r\n            `NODE_ENV=development`\r\n          ]\r\n        };\r\n      });\r\n      \r\n      const yamlContent = `\r\nversion: '${dockerComposeData.version}'\r\nservices:\r\n${Object.entries(dockerComposeData.services)\r\n        .map(([serviceName, serviceData]) => `  \r\n  ${serviceName}:\r\n    build:\r\n      context: ${serviceData.build.context}\r\n      dockerfile: ${serviceData.build.dockerfile}\r\n    ports:\r\n      - \"${serviceData.ports[0]}\"\r\n    volumes:\r\n      - \"${serviceData.volumes[0]}\"\r\n    environment:\r\n      - \"${serviceData.environment[0]}\"`)\r\n        .join('\\n')}`;\r\n\r\n    const dockerComposeYamlPath = path.join(dockerComposeFolder.fsPath, 'docker-compose.yaml');\r\n            await writeFileWithDirectoryCheck(dockerComposeYamlPath, yamlContent);\r\n}\r\n\r\nasync function writeFileWithDirectoryCheck(filePath: string, content: string) {\r\n    const folderPath = path.dirname(filePath);\r\n    await fs.promises.mkdir(folderPath, { recursive: true });\r\n    await fs.promises.writeFile(filePath, content);\r\n}\r\n\r\n","import * as vscode from 'vscode';\r\nimport * as fs from 'fs';\r\nimport * as path from 'path';\r\n\r\nexport async function generateDockerFiles() {\r\n    if (!vscode.workspace.workspaceFolders) {\r\n        vscode.window.showErrorMessage('No workspace is open.');\r\n        return;\r\n    }\r\n\r\n    const projectRoot = await vscode.window.showInputBox({\r\n        prompt: 'Root of your project:',\r\n        placeHolder: 'Example Usage: D:/MyProject/src',\r\n    });\r\n\r\n    const contApplicaitons = await vscode.window.showInputBox({\r\n        prompt: 'Your Apps:',\r\n        placeHolder: 'Example Usage(application folder names): frontned, backend, sync',\r\n    });\r\n\r\n    if (!contApplicaitons) {\r\n        vscode.window.showWarningMessage('Please specify at least one application path.');\r\n        return;\r\n    }\r\n\r\n    if (!projectRoot) {\r\n        vscode.window.showWarningMessage('Please provide root path.');\r\n        return;\r\n    }\r\n\r\n    const dockerFolder = vscode.Uri.joinPath(vscode.workspace.workspaceFolders[0].uri, 'docker');\r\n    fs.mkdirSync(dockerFolder.fsPath, { recursive: true });\r\n\r\n    const scriptsFolder = vscode.Uri.joinPath(vscode.workspace.workspaceFolders[0].uri, 'scripts');\r\n    fs.mkdirSync(scriptsFolder.fsPath, { recursive: true });\r\n\r\n    const dockerApplicationsPath = contApplicaitons.split(',').map(name => \"../docker/\" + name.trim()+\"/Dockerfile\");\r\n\r\n    const scriptContent = `\r\n#!/bin/bash\r\n\r\n# Define the applications and their Dockerfile paths\r\nAPPLICATIONS=(${contApplicaitons})\r\nDOCKERFILES=(\"${dockerApplicationsPath}\")\r\n\r\n# Loop through each application and build the Docker image\r\nfor ((i=0; i<\\${#APPLICATIONS[@]}; i++)); do\r\n    APP_NAME=\"\\${APPLICATIONS[$i]}\"\r\n    DOCKERFILE=\"\\${DOCKERFILES[$i]}\"\r\n    echo \"Building Docker image for $APP_NAME...\"\r\n    \r\n    # Check if the Dockerfile exists\r\n    if [ ! -f \"$DOCKERFILE\" ]; then\r\n        echo \"Dockerfile not found for $APP_NAME.\"\r\n        continue\r\n    fi\r\n    \r\n    # Build the Docker image\r\n    docker build -t \"$APP_NAME:latest\" -f \"$DOCKERFILE\" .\r\n    \r\n    echo \"Docker image for $APP_NAME built.\"\r\n    echo\r\ndone\r\n\r\necho \"All Docker images built.\"\r\n`\r\n    const scriptFilePath = path.join(scriptsFolder.fsPath, 'docker_build_image.bash');\r\n            await writeFileWithDirectoryCheck(scriptFilePath, scriptContent);\r\n\r\n    const dockerApplications = contApplicaitons.split(',').map(name => name.trim());\r\n\r\n    for (const appName of dockerApplications) {\r\n        const appFolder = vscode.Uri.joinPath(dockerFolder, appName);\r\n        fs.mkdirSync(appFolder.fsPath, { recursive: true });\r\n\r\n        const folderPath = findApplicationFolder(projectRoot, appName);\r\n        if (folderPath) {\r\n            const dockerFileContent = `\r\n                                        # Use a base image\r\n                                        FROM node:14\r\n\r\n                                        # Set the working directory inside the container\r\n                                        WORKDIR /app\r\n\r\n                                        # Install dependencies\r\n                                        RUN npm install\r\n\r\n                                        # Copy the rest of the application code to the container\r\n                                        COPY ${folderPath} ./src/${appName}\r\n\r\n                                        # Expose a port (if needed)\r\n                                        EXPOSE 3000\r\n\r\n                                        # Specify the command to run when the container starts\r\n                                        CMD [\"npm run start\"]\r\n                                    `;\r\n\r\n            const dockerFilePath = path.join(appFolder.fsPath, 'Dockerfile');\r\n            await writeFileWithDirectoryCheck(dockerFilePath, dockerFileContent);\r\n        }\r\n    }\r\n}\r\n\r\nasync function writeFileWithDirectoryCheck(filePath: string, content: string) {\r\n    const folderPath = path.dirname(filePath);\r\n    await fs.promises.mkdir(folderPath, { recursive: true });\r\n    await fs.promises.writeFile(filePath, content);\r\n}\r\n\r\nfunction findApplicationFolder(projectRoot: string, applicationName: string): string | undefined {\r\n  const folderPath = path.join(projectRoot, applicationName);\r\n\r\n  try {\r\n      const stat = fs.statSync(folderPath);\r\n      if (stat.isDirectory()) {\r\n          return folderPath;\r\n      }\r\n  } catch (error) {\r\n    vscode.window.showWarningMessage('Folder does not exist.');\r\n  }\r\n\r\n  return undefined;\r\n}\r\n","import * as vscode from 'vscode';\r\nimport { generateInlineComments } from '../utils/inlineComments';\r\n\r\nexport function generateInlineCommands() {\r\n    const editor = vscode.window.activeTextEditor;\r\n\r\n    if (!editor) {\r\n        vscode.window.showErrorMessage('No active editor found. Please open the page you want to run.');\r\n        return;\r\n    }\r\n\r\n    const selection = editor.selection;\r\n    const selectedLine = selection.active.line + 1;\r\n\r\n    generateInlineComments();\r\n\r\n    vscode.window.showInformationMessage('Inline comment added.');\r\n}\r\n","import * as vscode from 'vscode';\r\nimport * as fs from 'fs';\r\nimport * as path from 'path';\r\n\r\nexport async function generateKubernetesFiles() {\r\n    if (!vscode.workspace.workspaceFolders) {\r\n        vscode.window.showErrorMessage('No workspace is open.');\r\n        return;\r\n    }\r\n    const namespaceName = ''; \r\n\r\n    const deploymentsInput = await vscode.window.showInputBox({\r\n      prompt: 'Your Deployment Files:',\r\n      placeHolder: 'frontend, backend, redis',\r\n    });\r\n\r\n    if (!deploymentsInput) {\r\n      vscode.window.showInformationMessage('Please specify atleast one deployment name.');\r\n      return;\r\n  }\r\n\r\n  const deploymentNames = deploymentsInput.split(',').map(name => name.trim());\r\n\r\n    const kubernetesFolder = vscode.Uri.joinPath(vscode.workspace.workspaceFolders[0].uri, 'kubernetes');\r\n    fs.mkdirSync(kubernetesFolder.fsPath, { recursive: true });\r\n\r\n    const namespacesFolder = vscode.Uri.joinPath(kubernetesFolder, 'namespaces');\r\n    fs.mkdirSync(namespacesFolder.fsPath, { recursive: true });\r\n\r\n    const deploymentsFolder = vscode.Uri.joinPath(kubernetesFolder, 'deployments');\r\n    fs.mkdirSync(deploymentsFolder.fsPath, { recursive: true });\r\n\r\n    const servicesFolder = vscode.Uri.joinPath(kubernetesFolder, 'services');\r\n    fs.mkdirSync(servicesFolder.fsPath, { recursive: true });\r\n\r\n    const ingressFolder = vscode.Uri.joinPath(kubernetesFolder, 'ingess');\r\n    fs.mkdirSync(ingressFolder.fsPath, { recursive: true });\r\n\r\n    const configmapsFolder = vscode.Uri.joinPath(kubernetesFolder, 'configmaps');\r\n    fs.mkdirSync(configmapsFolder.fsPath, { recursive: true });\r\n\r\n    const secretsFolder = vscode.Uri.joinPath(kubernetesFolder, 'secrets');\r\n    fs.mkdirSync(secretsFolder.fsPath, { recursive: true });\r\n\r\n    const jobsFolder = vscode.Uri.joinPath(kubernetesFolder, 'jobs');\r\n    fs.mkdirSync(jobsFolder.fsPath, { recursive: true });\r\n\r\n    const namespaceYAML = \"apiVersion: v1\\nkind: Namespace\\nmetadata:name: ${namespaceName}\";\r\n    fs.writeFileSync(path.join(namespacesFolder.fsPath, 'development.yaml'), namespaceYAML);\r\n    fs.writeFileSync(path.join(namespacesFolder.fsPath, 'staging.yaml'), namespaceYAML);\r\n    fs.writeFileSync(path.join(namespacesFolder.fsPath, 'production.yaml'), namespaceYAML);\r\n\r\n    const promises = deploymentNames.map(async deploymentName => {\r\n      const deploymentYAML = `\r\n          apiVersion: apps/v1\r\n          kind: Deployment\r\n          metadata:\r\n          name: ${deploymentName}\r\n          namespace: ${namespaceName}\r\n          # Add other deployment details here\r\n          `;\r\n      await writeFileWithDirectoryCheck(path.join(deploymentsFolder.fsPath, `${deploymentName}.yaml`), deploymentYAML);\r\n\r\n      const serviceYAML = `\r\n          apiVersion: v1\r\n          kind: Service\r\n          metadata:\r\n          name: ${deploymentName}-service\r\n          namespace: ${namespaceName}\r\n          spec:\r\n          selector:\r\n            app: ${deploymentName}\r\n          ports:\r\n            - protocol: TCP\r\n              port: 80\r\n              targetPort: 8080\r\n          `;\r\n      await writeFileWithDirectoryCheck(path.join(servicesFolder.fsPath, `${deploymentName}-service.yaml`), serviceYAML);\r\n\r\n      const ingressYAML = `\r\n          apiVersion: networking.k8s.io/v1\r\n          kind: Ingress\r\n          metadata:\r\n          name: ${deploymentName}-ingress\r\n          namespace: ${namespaceName}\r\n          spec:\r\n          rules:\r\n            - host: ${deploymentName}.example.com\r\n              http:\r\n                paths:\r\n                  - path: /\r\n                    pathType: Prefix\r\n                    backend:\r\n                      service:\r\n                        name: ${deploymentName}-service\r\n                        port:\r\n                          number: 80\r\n          `;\r\n      await writeFileWithDirectoryCheck(path.join(ingressFolder.fsPath, `${deploymentName}-ingress.yaml`), ingressYAML);\r\n\r\n      const secretYAML = `\r\n          apiVersion: v1\r\n          kind: Secret\r\n          metadata:\r\n            name: ${deploymentName}-secret\r\n            namespace: ${namespaceName}\r\n          type: Opaque\r\n          data:\r\n            username: ${Buffer.from('my-username').toString('base64')}\r\n            password: ${Buffer.from('my-password').toString('base64')}\r\n          `;\r\n        await writeFileWithDirectoryCheck(path.join(secretsFolder.fsPath, `${deploymentName}-secret.yaml`), secretYAML);\r\n\r\n        const configMapYAML = `\r\n            apiVersion: v1\r\n            kind: ConfigMap\r\n            metadata:\r\n              name: ${deploymentName}-configmap\r\n              namespace: ${namespaceName}\r\n            data:\r\n              config.properties: |\r\n                key1=value1\r\n                key2=value2\r\n            `;\r\n        await writeFileWithDirectoryCheck(path.join(configmapsFolder.fsPath, `${deploymentName}-configmap.yaml`), configMapYAML);\r\n    \r\n  });\r\n\r\n  await Promise.all(promises);\r\n\r\n  vscode.window.showInformationMessage(`${deploymentNames.length} deployment, service, and ingress files generated successfully.`);\r\n}\r\n\r\nasync function writeFileWithDirectoryCheck(filePath: string, content: string) {\r\n  const folderPath = path.dirname(filePath);\r\n  await fs.promises.mkdir(folderPath, { recursive: true });\r\n  await fs.promises.writeFile(filePath, content);\r\n}\r\n\r\n","import * as vscode from 'vscode';\r\nimport * as path from 'path';\r\nimport { analyzeCode } from './commands/analyzeCode';\r\nimport { generateInlineCommands } from './commands/generateInlineCommands';\r\nimport { generateDockerFiles } from './commands/generateDockerFiles';\r\nimport { generateKubernetesFiles } from './commands/generateKubernetesFiles';\r\nimport { generateDockerComposeYaml } from './commands/generateDockerComposeYaml'\r\n\r\nexport function activate(context: vscode.ExtensionContext) {\r\n    console.log('Backdoor extension is now active.');\r\n    vscode.window.showInformationMessage('Important: Use CTRL + i for open extension UI.');\r\n    // Register commands\r\n    context.subscriptions.push(\r\n        vscode.commands.registerCommand('backdoor.analyzeCode', analyzeCode),\r\n        vscode.commands.registerCommand('backdoor.generateInlineCommands', generateInlineCommands),\r\n        vscode.commands.registerCommand('backdoor.generateDockerFiles', generateDockerFiles),\r\n        vscode.commands.registerCommand('backdoor.backdoorDashboardInit', showBackdoorDashboard),\r\n        vscode.commands.registerCommand('backdoor.generateKubernetesFiles', generateKubernetesFiles),\r\n        vscode.commands.registerCommand('backdoor.generateDockerComposeYaml', generateDockerComposeYaml)\r\n    );\r\n}\r\n\r\nasync function showBackdoorDashboard() {\r\n    const panel = vscode.window.createWebviewPanel(\r\n        'backdoorUI',\r\n        'Backdoor UI',\r\n        vscode.ViewColumn.One,\r\n        {}\r\n    );\r\n\r\n    panel.webview.html = getWebviewContent(panel.webview);\r\n\r\n}\r\n\r\nfunction getWebviewContent(webview: vscode.Webview): string {\r\n    const buttonStyle = 'padding: 6px 12px; font-size: 16px; background-color:#313131; border-radius:7px; border:1px solid white; color:white; margin: 10px;';\r\n    const extensionPath = vscode.extensions.getExtension('Latrodect.backdoor')?.extensionPath || '';\r\n    return `\r\n        <!DOCTYPE html>\r\n        <html lang=\"en\">\r\n        <head>\r\n            <meta charset=\"UTF-8\">\r\n            <meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'none'; style-src ${webview.cspSource} 'unsafe-inline'; script-src ${webview.cspSource} 'unsafe-inline' 'unsafe-eval';\">\r\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n            <title>Backdoor Code Reviewer</title>\r\n        </head>\r\n        <body>\r\n            <div style=\"display:flex;\">\r\n            <img src=\"${webview.asWebviewUri(vscode.Uri.file(path.join(extensionPath, 'images', 'png')))}\" />\r\n            <h1>Backdoor Code Reviewer</h1>\r\n            </div>\r\n            <p>${webview.asWebviewUri(vscode.Uri.file(path.join(extensionPath, 'images', 'png')))}</p>\r\n            <p style=\"color:white;\"> Backdoor is a free code reviewer assistant. It helps developers with AI support, increases code quality with highlighter and linter features.<p>\r\n            <br>\r\n            <hr>\r\n            <h2>Generate Kubernetes Deployment Files</h2>\r\n            <p style=\"color:white;\"> Type CTRL + l for generate kubernetes deployment files. When you type this command input box will open. <br>Type your apps like backend, frontned with comma seperation. Enjoy.<p>\r\n            <button id=\"analyzeButton\" style=\"${buttonStyle}\">Enable Code Analysis</button>\r\n            <button id=\"analyzeButton\" style=\"${buttonStyle}\">Enable AI Support</button>\r\n            <button id=\"analyzeButton\" style=\"${buttonStyle}\">Enable Highlighter</button>\r\n            <script src=\"${webview.asWebviewUri(vscode.Uri.file(__dirname + '/script.js'))}\"></script>\r\n        </body>\r\n        </html>\r\n    `;\r\n}\r\n\r\nexport function deactivate() {\r\n    console.log('Backdoor Code Reviewer extension is now deactivated.');\r\n}\r\n","import * as vscode from 'vscode';\r\n// import axios from 'axios';\r\n\r\nexport async function generateInlineComments() {\r\n    const editor = vscode.window.activeTextEditor;\r\n    if (!editor) {\r\n        vscode.window.showErrorMessage('No active editor found.');\r\n        return;\r\n    }\r\n\r\n    const selectedCode = getSelectedCode(editor);\r\n    if (!selectedCode) {\r\n        vscode.window.showInformationMessage('No code is selected.');\r\n        return;\r\n    }\r\n    // await generateComment(selectedCode);\r\n    const generatedComment = \"Axios will be added soon.\"\r\n    insertComment(editor, generatedComment);\r\n}\r\n\r\nfunction getSelectedCode(editor: vscode.TextEditor): string | undefined {\r\n    const selection = editor.selection;\r\n    if (selection.isEmpty) {\r\n        return undefined;\r\n    }\r\n\r\n    return editor.document.getText(selection);\r\n}\r\n\r\n// async function generateComment(code: string): Promise<string> {\r\n//     const apiKey = await vscode.window.showInputBox({\r\n//         prompt: 'ChatGPT API Key',\r\n//         placeHolder: 'sk-..JKuaJ',\r\n//       });\r\n//     const prompt = `Code to review:\\n\\n${code}\\n\\nPlease provide a comment for this code.`;\r\n\r\n//     try {\r\n//         const response = await axios.post(\r\n//             'https://api.openai.com/v1/engines/davinci-codex/completions',\r\n//             {\r\n//                 prompt,\r\n//                 max_tokens: 50, \r\n//             },\r\n//             {\r\n//                 headers: {\r\n//                     'Content-Type': 'application/json',\r\n//                     'Authorization': `Bearer ${apiKey}`,\r\n//                 },\r\n//             }\r\n//         );\r\n\r\n//         return response.data.choices[0].text.trim();\r\n//     } catch (error) {\r\n//         console.error('Error generating comment:', error);\r\n//         return 'Unable to generate comment at the moment.';\r\n//     }\r\n// }\r\n\r\nfunction insertComment(editor: vscode.TextEditor, comment: string) {\r\n    const selection = editor.selection;\r\n    const position = selection.end;\r\n    editor.edit(editBuilder => {\r\n        editBuilder.insert(position, '\\n// Generated Comment: ' + comment);\r\n    });\r\n\r\n    vscode.window.showInformationMessage('Comment generated and inserted.');\r\n}\r\n","module.exports = require(\"vscode\");","module.exports = require(\"fs\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(112);\n"],"names":["editor","vscode","window","activeTextEditor","showErrorMessage","messageRules","length","naming","strings","document","allowedLanguages","javascript","python","typescript","languageId","filePath","uri","fsPath","fs","readFile","err","data","message","lines","split","longLines","filter","line","showInformationMessage","showWarningMessage","lowerCamelCaseVars","i","variableRegex","match","exec","variableName","test","push","name","nonCamelCaseInfo","map","variable","join","modifiedContent","stringLiteralRegex","originalString","convertedString","replace","writeFile","writeErr","workspace","workspaceFolders","inputServiceCount","showInputBox","prompt","placeHolder","serviceCount","parseInt","serviceList","index","serviceInformation","service","trim","dockerComposeFolder","Uri","joinPath","mkdirSync","recursive","dockerComposeData","version","services","forEach","serviceName","port","build","context","dockerfile","ports","volumes","environment","yamlContent","Object","entries","serviceData","dockerComposeYamlPath","path","content","folderPath","dirname","promises","mkdir","writeFileWithDirectoryCheck","findApplicationFolder","projectRoot","applicationName","statSync","isDirectory","error","contApplicaitons","dockerFolder","scriptsFolder","dockerApplicationsPath","scriptContent","scriptFilePath","dockerApplications","appName","appFolder","dockerFileContent","dockerFilePath","selection","active","generateInlineComments","deploymentsInput","deploymentNames","kubernetesFolder","namespacesFolder","deploymentsFolder","servicesFolder","ingressFolder","configmapsFolder","secretsFolder","jobsFolder","namespaceYAML","writeFileSync","deploymentName","deploymentYAML","serviceYAML","ingressYAML","secretYAML","Buffer","from","toString","configMapYAML","Promise","all","showBackdoorDashboard","panel","createWebviewPanel","ViewColumn","One","webview","html","buttonStyle","extensionPath","extensions","getExtension","cspSource","asWebviewUri","file","__dirname","getWebviewContent","console","log","subscriptions","commands","registerCommand","analyzeCode","generateInlineCommands","generateDockerFiles","generateKubernetesFiles","generateDockerComposeYaml","selectedCode","isEmpty","getText","getSelectedCode","comment","position","end","edit","editBuilder","insert","insertComment","module","exports","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call"],"sourceRoot":""}